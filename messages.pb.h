// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace yosysZKP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class WireValues;
class TruthTableEntry;
class TruthTable;
class TableCommitment;
class Commitment;
class ExecutionReveal;
class ScramblingReveal;
class ProverSecret;
class RevealRequest;
class ProveeState;

// ===================================================================

class WireValues : public ::google::protobuf::Message {
 public:
  WireValues();
  virtual ~WireValues();

  WireValues(const WireValues& from);

  inline WireValues& operator=(const WireValues& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WireValues& default_instance();

  void Swap(WireValues* other);

  // implements Message ----------------------------------------------

  WireValues* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WireValues& from);
  void MergeFrom(const WireValues& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline bool entries(int index) const;
  inline void set_entries(int index, bool value);
  inline void add_entries(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      entries() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:yosysZKP.WireValues)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > entries_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static WireValues* default_instance_;
};
// -------------------------------------------------------------------

class TruthTableEntry : public ::google::protobuf::Message {
 public:
  TruthTableEntry();
  virtual ~TruthTableEntry();

  TruthTableEntry(const TruthTableEntry& from);

  inline TruthTableEntry& operator=(const TruthTableEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TruthTableEntry& default_instance();

  void Swap(TruthTableEntry* other);

  // implements Message ----------------------------------------------

  TruthTableEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TruthTableEntry& from);
  void MergeFrom(const TruthTableEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool inputs = 1;
  inline int inputs_size() const;
  inline void clear_inputs();
  static const int kInputsFieldNumber = 1;
  inline bool inputs(int index) const;
  inline void set_inputs(int index, bool value);
  inline void add_inputs(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      inputs() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_inputs();

  // repeated bool outputs = 2;
  inline int outputs_size() const;
  inline void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  inline bool outputs(int index) const;
  inline void set_outputs(int index, bool value);
  inline void add_outputs(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      outputs() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_outputs();

  // required bytes nonce = 3;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 3;
  inline const ::std::string& nonce() const;
  inline void set_nonce(const ::std::string& value);
  inline void set_nonce(const char* value);
  inline void set_nonce(const void* value, size_t size);
  inline ::std::string* mutable_nonce();
  inline ::std::string* release_nonce();
  inline void set_allocated_nonce(::std::string* nonce);

  // @@protoc_insertion_point(class_scope:yosysZKP.TruthTableEntry)
 private:
  inline void set_has_nonce();
  inline void clear_has_nonce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > inputs_;
  ::google::protobuf::RepeatedField< bool > outputs_;
  ::std::string* nonce_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TruthTableEntry* default_instance_;
};
// -------------------------------------------------------------------

class TruthTable : public ::google::protobuf::Message {
 public:
  TruthTable();
  virtual ~TruthTable();

  TruthTable(const TruthTable& from);

  inline TruthTable& operator=(const TruthTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TruthTable& default_instance();

  void Swap(TruthTable* other);

  // implements Message ----------------------------------------------

  TruthTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TruthTable& from);
  void MergeFrom(const TruthTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .yosysZKP.TruthTableEntry entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline const ::yosysZKP::TruthTableEntry& entries(int index) const;
  inline ::yosysZKP::TruthTableEntry* mutable_entries(int index);
  inline ::yosysZKP::TruthTableEntry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:yosysZKP.TruthTable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry > entries_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TruthTable* default_instance_;
};
// -------------------------------------------------------------------

class TableCommitment : public ::google::protobuf::Message {
 public:
  TableCommitment();
  virtual ~TableCommitment();

  TableCommitment(const TableCommitment& from);

  inline TableCommitment& operator=(const TableCommitment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableCommitment& default_instance();

  void Swap(TableCommitment* other);

  // implements Message ----------------------------------------------

  TableCommitment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableCommitment& from);
  void MergeFrom(const TableCommitment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes entryhashes = 1;
  inline int entryhashes_size() const;
  inline void clear_entryhashes();
  static const int kEntryhashesFieldNumber = 1;
  inline const ::std::string& entryhashes(int index) const;
  inline ::std::string* mutable_entryhashes(int index);
  inline void set_entryhashes(int index, const ::std::string& value);
  inline void set_entryhashes(int index, const char* value);
  inline void set_entryhashes(int index, const void* value, size_t size);
  inline ::std::string* add_entryhashes();
  inline void add_entryhashes(const ::std::string& value);
  inline void add_entryhashes(const char* value);
  inline void add_entryhashes(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& entryhashes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_entryhashes();

  // @@protoc_insertion_point(class_scope:yosysZKP.TableCommitment)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> entryhashes_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TableCommitment* default_instance_;
};
// -------------------------------------------------------------------

class Commitment : public ::google::protobuf::Message {
 public:
  Commitment();
  virtual ~Commitment();

  Commitment(const Commitment& from);

  inline Commitment& operator=(const Commitment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commitment& default_instance();

  void Swap(Commitment* other);

  // implements Message ----------------------------------------------

  Commitment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commitment& from);
  void MergeFrom(const Commitment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool output = 1;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 1;
  inline bool output(int index) const;
  inline void set_output(int index, bool value);
  inline void add_output(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      output() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_output();

  // repeated .yosysZKP.TableCommitment gatehashes = 2;
  inline int gatehashes_size() const;
  inline void clear_gatehashes();
  static const int kGatehashesFieldNumber = 2;
  inline const ::yosysZKP::TableCommitment& gatehashes(int index) const;
  inline ::yosysZKP::TableCommitment* mutable_gatehashes(int index);
  inline ::yosysZKP::TableCommitment* add_gatehashes();
  inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TableCommitment >&
      gatehashes() const;
  inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TableCommitment >*
      mutable_gatehashes();

  // @@protoc_insertion_point(class_scope:yosysZKP.Commitment)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > output_;
  ::google::protobuf::RepeatedPtrField< ::yosysZKP::TableCommitment > gatehashes_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Commitment* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionReveal : public ::google::protobuf::Message {
 public:
  ExecutionReveal();
  virtual ~ExecutionReveal();

  ExecutionReveal(const ExecutionReveal& from);

  inline ExecutionReveal& operator=(const ExecutionReveal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionReveal& default_instance();

  void Swap(ExecutionReveal* other);

  // implements Message ----------------------------------------------

  ExecutionReveal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionReveal& from);
  void MergeFrom(const ExecutionReveal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .yosysZKP.WireValues exec = 1;
  inline bool has_exec() const;
  inline void clear_exec();
  static const int kExecFieldNumber = 1;
  inline const ::yosysZKP::WireValues& exec() const;
  inline ::yosysZKP::WireValues* mutable_exec();
  inline ::yosysZKP::WireValues* release_exec();
  inline void set_allocated_exec(::yosysZKP::WireValues* exec);

  // repeated .yosysZKP.TruthTableEntry entries = 2;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 2;
  inline const ::yosysZKP::TruthTableEntry& entries(int index) const;
  inline ::yosysZKP::TruthTableEntry* mutable_entries(int index);
  inline ::yosysZKP::TruthTableEntry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:yosysZKP.ExecutionReveal)
 private:
  inline void set_has_exec();
  inline void clear_has_exec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yosysZKP::WireValues* exec_;
  ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry > entries_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ExecutionReveal* default_instance_;
};
// -------------------------------------------------------------------

class ScramblingReveal : public ::google::protobuf::Message {
 public:
  ScramblingReveal();
  virtual ~ScramblingReveal();

  ScramblingReveal(const ScramblingReveal& from);

  inline ScramblingReveal& operator=(const ScramblingReveal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScramblingReveal& default_instance();

  void Swap(ScramblingReveal* other);

  // implements Message ----------------------------------------------

  ScramblingReveal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScramblingReveal& from);
  void MergeFrom(const ScramblingReveal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .yosysZKP.WireValues keys = 1;
  inline bool has_keys() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::yosysZKP::WireValues& keys() const;
  inline ::yosysZKP::WireValues* mutable_keys();
  inline ::yosysZKP::WireValues* release_keys();
  inline void set_allocated_keys(::yosysZKP::WireValues* keys);

  // repeated .yosysZKP.TruthTable gates = 2;
  inline int gates_size() const;
  inline void clear_gates();
  static const int kGatesFieldNumber = 2;
  inline const ::yosysZKP::TruthTable& gates(int index) const;
  inline ::yosysZKP::TruthTable* mutable_gates(int index);
  inline ::yosysZKP::TruthTable* add_gates();
  inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTable >&
      gates() const;
  inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTable >*
      mutable_gates();

  // @@protoc_insertion_point(class_scope:yosysZKP.ScramblingReveal)
 private:
  inline void set_has_keys();
  inline void clear_has_keys();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yosysZKP::WireValues* keys_;
  ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTable > gates_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ScramblingReveal* default_instance_;
};
// -------------------------------------------------------------------

class ProverSecret : public ::google::protobuf::Message {
 public:
  ProverSecret();
  virtual ~ProverSecret();

  ProverSecret(const ProverSecret& from);

  inline ProverSecret& operator=(const ProverSecret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProverSecret& default_instance();

  void Swap(ProverSecret* other);

  // implements Message ----------------------------------------------

  ProverSecret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProverSecret& from);
  void MergeFrom(const ProverSecret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .yosysZKP.ExecutionReveal execution = 1;
  inline bool has_execution() const;
  inline void clear_execution();
  static const int kExecutionFieldNumber = 1;
  inline const ::yosysZKP::ExecutionReveal& execution() const;
  inline ::yosysZKP::ExecutionReveal* mutable_execution();
  inline ::yosysZKP::ExecutionReveal* release_execution();
  inline void set_allocated_execution(::yosysZKP::ExecutionReveal* execution);

  // optional .yosysZKP.ScramblingReveal scrambling = 2;
  inline bool has_scrambling() const;
  inline void clear_scrambling();
  static const int kScramblingFieldNumber = 2;
  inline const ::yosysZKP::ScramblingReveal& scrambling() const;
  inline ::yosysZKP::ScramblingReveal* mutable_scrambling();
  inline ::yosysZKP::ScramblingReveal* release_scrambling();
  inline void set_allocated_scrambling(::yosysZKP::ScramblingReveal* scrambling);

  // @@protoc_insertion_point(class_scope:yosysZKP.ProverSecret)
 private:
  inline void set_has_execution();
  inline void clear_has_execution();
  inline void set_has_scrambling();
  inline void clear_has_scrambling();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yosysZKP::ExecutionReveal* execution_;
  ::yosysZKP::ScramblingReveal* scrambling_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ProverSecret* default_instance_;
};
// -------------------------------------------------------------------

class RevealRequest : public ::google::protobuf::Message {
 public:
  RevealRequest();
  virtual ~RevealRequest();

  RevealRequest(const RevealRequest& from);

  inline RevealRequest& operator=(const RevealRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevealRequest& default_instance();

  void Swap(RevealRequest* other);

  // implements Message ----------------------------------------------

  RevealRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RevealRequest& from);
  void MergeFrom(const RevealRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool scrambling = 1;
  inline int scrambling_size() const;
  inline void clear_scrambling();
  static const int kScramblingFieldNumber = 1;
  inline bool scrambling(int index) const;
  inline void set_scrambling(int index, bool value);
  inline void add_scrambling(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      scrambling() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_scrambling();

  // @@protoc_insertion_point(class_scope:yosysZKP.RevealRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > scrambling_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static RevealRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProveeState : public ::google::protobuf::Message {
 public:
  ProveeState();
  virtual ~ProveeState();

  ProveeState(const ProveeState& from);

  inline ProveeState& operator=(const ProveeState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProveeState& default_instance();

  void Swap(ProveeState* other);

  // implements Message ----------------------------------------------

  ProveeState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProveeState& from);
  void MergeFrom(const ProveeState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool scrambling = 1;
  inline bool has_scrambling() const;
  inline void clear_scrambling();
  static const int kScramblingFieldNumber = 1;
  inline bool scrambling() const;
  inline void set_scrambling(bool value);

  // required .yosysZKP.Commitment commitment = 2;
  inline bool has_commitment() const;
  inline void clear_commitment();
  static const int kCommitmentFieldNumber = 2;
  inline const ::yosysZKP::Commitment& commitment() const;
  inline ::yosysZKP::Commitment* mutable_commitment();
  inline ::yosysZKP::Commitment* release_commitment();
  inline void set_allocated_commitment(::yosysZKP::Commitment* commitment);

  // @@protoc_insertion_point(class_scope:yosysZKP.ProveeState)
 private:
  inline void set_has_scrambling();
  inline void clear_has_scrambling();
  inline void set_has_commitment();
  inline void clear_has_commitment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yosysZKP::Commitment* commitment_;
  bool scrambling_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ProveeState* default_instance_;
};
// ===================================================================


// ===================================================================

// WireValues

// repeated bool entries = 1;
inline int WireValues::entries_size() const {
  return entries_.size();
}
inline void WireValues::clear_entries() {
  entries_.Clear();
}
inline bool WireValues::entries(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.WireValues.entries)
  return entries_.Get(index);
}
inline void WireValues::set_entries(int index, bool value) {
  entries_.Set(index, value);
  // @@protoc_insertion_point(field_set:yosysZKP.WireValues.entries)
}
inline void WireValues::add_entries(bool value) {
  entries_.Add(value);
  // @@protoc_insertion_point(field_add:yosysZKP.WireValues.entries)
}
inline const ::google::protobuf::RepeatedField< bool >&
WireValues::entries() const {
  // @@protoc_insertion_point(field_list:yosysZKP.WireValues.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedField< bool >*
WireValues::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.WireValues.entries)
  return &entries_;
}

// -------------------------------------------------------------------

// TruthTableEntry

// repeated bool inputs = 1;
inline int TruthTableEntry::inputs_size() const {
  return inputs_.size();
}
inline void TruthTableEntry::clear_inputs() {
  inputs_.Clear();
}
inline bool TruthTableEntry::inputs(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.TruthTableEntry.inputs)
  return inputs_.Get(index);
}
inline void TruthTableEntry::set_inputs(int index, bool value) {
  inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:yosysZKP.TruthTableEntry.inputs)
}
inline void TruthTableEntry::add_inputs(bool value) {
  inputs_.Add(value);
  // @@protoc_insertion_point(field_add:yosysZKP.TruthTableEntry.inputs)
}
inline const ::google::protobuf::RepeatedField< bool >&
TruthTableEntry::inputs() const {
  // @@protoc_insertion_point(field_list:yosysZKP.TruthTableEntry.inputs)
  return inputs_;
}
inline ::google::protobuf::RepeatedField< bool >*
TruthTableEntry::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.TruthTableEntry.inputs)
  return &inputs_;
}

// repeated bool outputs = 2;
inline int TruthTableEntry::outputs_size() const {
  return outputs_.size();
}
inline void TruthTableEntry::clear_outputs() {
  outputs_.Clear();
}
inline bool TruthTableEntry::outputs(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.TruthTableEntry.outputs)
  return outputs_.Get(index);
}
inline void TruthTableEntry::set_outputs(int index, bool value) {
  outputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:yosysZKP.TruthTableEntry.outputs)
}
inline void TruthTableEntry::add_outputs(bool value) {
  outputs_.Add(value);
  // @@protoc_insertion_point(field_add:yosysZKP.TruthTableEntry.outputs)
}
inline const ::google::protobuf::RepeatedField< bool >&
TruthTableEntry::outputs() const {
  // @@protoc_insertion_point(field_list:yosysZKP.TruthTableEntry.outputs)
  return outputs_;
}
inline ::google::protobuf::RepeatedField< bool >*
TruthTableEntry::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.TruthTableEntry.outputs)
  return &outputs_;
}

// required bytes nonce = 3;
inline bool TruthTableEntry::has_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TruthTableEntry::set_has_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TruthTableEntry::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TruthTableEntry::clear_nonce() {
  if (nonce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nonce_->clear();
  }
  clear_has_nonce();
}
inline const ::std::string& TruthTableEntry::nonce() const {
  // @@protoc_insertion_point(field_get:yosysZKP.TruthTableEntry.nonce)
  return *nonce_;
}
inline void TruthTableEntry::set_nonce(const ::std::string& value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
  // @@protoc_insertion_point(field_set:yosysZKP.TruthTableEntry.nonce)
}
inline void TruthTableEntry::set_nonce(const char* value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
  // @@protoc_insertion_point(field_set_char:yosysZKP.TruthTableEntry.nonce)
}
inline void TruthTableEntry::set_nonce(const void* value, size_t size) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yosysZKP.TruthTableEntry.nonce)
}
inline ::std::string* TruthTableEntry::mutable_nonce() {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nonce_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yosysZKP.TruthTableEntry.nonce)
  return nonce_;
}
inline ::std::string* TruthTableEntry::release_nonce() {
  clear_has_nonce();
  if (nonce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nonce_;
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TruthTableEntry::set_allocated_nonce(::std::string* nonce) {
  if (nonce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nonce_;
  }
  if (nonce) {
    set_has_nonce();
    nonce_ = nonce;
  } else {
    clear_has_nonce();
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yosysZKP.TruthTableEntry.nonce)
}

// -------------------------------------------------------------------

// TruthTable

// repeated .yosysZKP.TruthTableEntry entries = 1;
inline int TruthTable::entries_size() const {
  return entries_.size();
}
inline void TruthTable::clear_entries() {
  entries_.Clear();
}
inline const ::yosysZKP::TruthTableEntry& TruthTable::entries(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.TruthTable.entries)
  return entries_.Get(index);
}
inline ::yosysZKP::TruthTableEntry* TruthTable::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:yosysZKP.TruthTable.entries)
  return entries_.Mutable(index);
}
inline ::yosysZKP::TruthTableEntry* TruthTable::add_entries() {
  // @@protoc_insertion_point(field_add:yosysZKP.TruthTable.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >&
TruthTable::entries() const {
  // @@protoc_insertion_point(field_list:yosysZKP.TruthTable.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >*
TruthTable::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.TruthTable.entries)
  return &entries_;
}

// -------------------------------------------------------------------

// TableCommitment

// repeated bytes entryhashes = 1;
inline int TableCommitment::entryhashes_size() const {
  return entryhashes_.size();
}
inline void TableCommitment::clear_entryhashes() {
  entryhashes_.Clear();
}
inline const ::std::string& TableCommitment::entryhashes(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.TableCommitment.entryhashes)
  return entryhashes_.Get(index);
}
inline ::std::string* TableCommitment::mutable_entryhashes(int index) {
  // @@protoc_insertion_point(field_mutable:yosysZKP.TableCommitment.entryhashes)
  return entryhashes_.Mutable(index);
}
inline void TableCommitment::set_entryhashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:yosysZKP.TableCommitment.entryhashes)
  entryhashes_.Mutable(index)->assign(value);
}
inline void TableCommitment::set_entryhashes(int index, const char* value) {
  entryhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:yosysZKP.TableCommitment.entryhashes)
}
inline void TableCommitment::set_entryhashes(int index, const void* value, size_t size) {
  entryhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yosysZKP.TableCommitment.entryhashes)
}
inline ::std::string* TableCommitment::add_entryhashes() {
  return entryhashes_.Add();
}
inline void TableCommitment::add_entryhashes(const ::std::string& value) {
  entryhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:yosysZKP.TableCommitment.entryhashes)
}
inline void TableCommitment::add_entryhashes(const char* value) {
  entryhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:yosysZKP.TableCommitment.entryhashes)
}
inline void TableCommitment::add_entryhashes(const void* value, size_t size) {
  entryhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:yosysZKP.TableCommitment.entryhashes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableCommitment::entryhashes() const {
  // @@protoc_insertion_point(field_list:yosysZKP.TableCommitment.entryhashes)
  return entryhashes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableCommitment::mutable_entryhashes() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.TableCommitment.entryhashes)
  return &entryhashes_;
}

// -------------------------------------------------------------------

// Commitment

// repeated bool output = 1;
inline int Commitment::output_size() const {
  return output_.size();
}
inline void Commitment::clear_output() {
  output_.Clear();
}
inline bool Commitment::output(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.Commitment.output)
  return output_.Get(index);
}
inline void Commitment::set_output(int index, bool value) {
  output_.Set(index, value);
  // @@protoc_insertion_point(field_set:yosysZKP.Commitment.output)
}
inline void Commitment::add_output(bool value) {
  output_.Add(value);
  // @@protoc_insertion_point(field_add:yosysZKP.Commitment.output)
}
inline const ::google::protobuf::RepeatedField< bool >&
Commitment::output() const {
  // @@protoc_insertion_point(field_list:yosysZKP.Commitment.output)
  return output_;
}
inline ::google::protobuf::RepeatedField< bool >*
Commitment::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.Commitment.output)
  return &output_;
}

// repeated .yosysZKP.TableCommitment gatehashes = 2;
inline int Commitment::gatehashes_size() const {
  return gatehashes_.size();
}
inline void Commitment::clear_gatehashes() {
  gatehashes_.Clear();
}
inline const ::yosysZKP::TableCommitment& Commitment::gatehashes(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.Commitment.gatehashes)
  return gatehashes_.Get(index);
}
inline ::yosysZKP::TableCommitment* Commitment::mutable_gatehashes(int index) {
  // @@protoc_insertion_point(field_mutable:yosysZKP.Commitment.gatehashes)
  return gatehashes_.Mutable(index);
}
inline ::yosysZKP::TableCommitment* Commitment::add_gatehashes() {
  // @@protoc_insertion_point(field_add:yosysZKP.Commitment.gatehashes)
  return gatehashes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TableCommitment >&
Commitment::gatehashes() const {
  // @@protoc_insertion_point(field_list:yosysZKP.Commitment.gatehashes)
  return gatehashes_;
}
inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TableCommitment >*
Commitment::mutable_gatehashes() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.Commitment.gatehashes)
  return &gatehashes_;
}

// -------------------------------------------------------------------

// ExecutionReveal

// required .yosysZKP.WireValues exec = 1;
inline bool ExecutionReveal::has_exec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionReveal::set_has_exec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionReveal::clear_has_exec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionReveal::clear_exec() {
  if (exec_ != NULL) exec_->::yosysZKP::WireValues::Clear();
  clear_has_exec();
}
inline const ::yosysZKP::WireValues& ExecutionReveal::exec() const {
  // @@protoc_insertion_point(field_get:yosysZKP.ExecutionReveal.exec)
  return exec_ != NULL ? *exec_ : *default_instance_->exec_;
}
inline ::yosysZKP::WireValues* ExecutionReveal::mutable_exec() {
  set_has_exec();
  if (exec_ == NULL) exec_ = new ::yosysZKP::WireValues;
  // @@protoc_insertion_point(field_mutable:yosysZKP.ExecutionReveal.exec)
  return exec_;
}
inline ::yosysZKP::WireValues* ExecutionReveal::release_exec() {
  clear_has_exec();
  ::yosysZKP::WireValues* temp = exec_;
  exec_ = NULL;
  return temp;
}
inline void ExecutionReveal::set_allocated_exec(::yosysZKP::WireValues* exec) {
  delete exec_;
  exec_ = exec;
  if (exec) {
    set_has_exec();
  } else {
    clear_has_exec();
  }
  // @@protoc_insertion_point(field_set_allocated:yosysZKP.ExecutionReveal.exec)
}

// repeated .yosysZKP.TruthTableEntry entries = 2;
inline int ExecutionReveal::entries_size() const {
  return entries_.size();
}
inline void ExecutionReveal::clear_entries() {
  entries_.Clear();
}
inline const ::yosysZKP::TruthTableEntry& ExecutionReveal::entries(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.ExecutionReveal.entries)
  return entries_.Get(index);
}
inline ::yosysZKP::TruthTableEntry* ExecutionReveal::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:yosysZKP.ExecutionReveal.entries)
  return entries_.Mutable(index);
}
inline ::yosysZKP::TruthTableEntry* ExecutionReveal::add_entries() {
  // @@protoc_insertion_point(field_add:yosysZKP.ExecutionReveal.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >&
ExecutionReveal::entries() const {
  // @@protoc_insertion_point(field_list:yosysZKP.ExecutionReveal.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTableEntry >*
ExecutionReveal::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.ExecutionReveal.entries)
  return &entries_;
}

// -------------------------------------------------------------------

// ScramblingReveal

// required .yosysZKP.WireValues keys = 1;
inline bool ScramblingReveal::has_keys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScramblingReveal::set_has_keys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScramblingReveal::clear_has_keys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScramblingReveal::clear_keys() {
  if (keys_ != NULL) keys_->::yosysZKP::WireValues::Clear();
  clear_has_keys();
}
inline const ::yosysZKP::WireValues& ScramblingReveal::keys() const {
  // @@protoc_insertion_point(field_get:yosysZKP.ScramblingReveal.keys)
  return keys_ != NULL ? *keys_ : *default_instance_->keys_;
}
inline ::yosysZKP::WireValues* ScramblingReveal::mutable_keys() {
  set_has_keys();
  if (keys_ == NULL) keys_ = new ::yosysZKP::WireValues;
  // @@protoc_insertion_point(field_mutable:yosysZKP.ScramblingReveal.keys)
  return keys_;
}
inline ::yosysZKP::WireValues* ScramblingReveal::release_keys() {
  clear_has_keys();
  ::yosysZKP::WireValues* temp = keys_;
  keys_ = NULL;
  return temp;
}
inline void ScramblingReveal::set_allocated_keys(::yosysZKP::WireValues* keys) {
  delete keys_;
  keys_ = keys;
  if (keys) {
    set_has_keys();
  } else {
    clear_has_keys();
  }
  // @@protoc_insertion_point(field_set_allocated:yosysZKP.ScramblingReveal.keys)
}

// repeated .yosysZKP.TruthTable gates = 2;
inline int ScramblingReveal::gates_size() const {
  return gates_.size();
}
inline void ScramblingReveal::clear_gates() {
  gates_.Clear();
}
inline const ::yosysZKP::TruthTable& ScramblingReveal::gates(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.ScramblingReveal.gates)
  return gates_.Get(index);
}
inline ::yosysZKP::TruthTable* ScramblingReveal::mutable_gates(int index) {
  // @@protoc_insertion_point(field_mutable:yosysZKP.ScramblingReveal.gates)
  return gates_.Mutable(index);
}
inline ::yosysZKP::TruthTable* ScramblingReveal::add_gates() {
  // @@protoc_insertion_point(field_add:yosysZKP.ScramblingReveal.gates)
  return gates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTable >&
ScramblingReveal::gates() const {
  // @@protoc_insertion_point(field_list:yosysZKP.ScramblingReveal.gates)
  return gates_;
}
inline ::google::protobuf::RepeatedPtrField< ::yosysZKP::TruthTable >*
ScramblingReveal::mutable_gates() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.ScramblingReveal.gates)
  return &gates_;
}

// -------------------------------------------------------------------

// ProverSecret

// optional .yosysZKP.ExecutionReveal execution = 1;
inline bool ProverSecret::has_execution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProverSecret::set_has_execution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProverSecret::clear_has_execution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProverSecret::clear_execution() {
  if (execution_ != NULL) execution_->::yosysZKP::ExecutionReveal::Clear();
  clear_has_execution();
}
inline const ::yosysZKP::ExecutionReveal& ProverSecret::execution() const {
  // @@protoc_insertion_point(field_get:yosysZKP.ProverSecret.execution)
  return execution_ != NULL ? *execution_ : *default_instance_->execution_;
}
inline ::yosysZKP::ExecutionReveal* ProverSecret::mutable_execution() {
  set_has_execution();
  if (execution_ == NULL) execution_ = new ::yosysZKP::ExecutionReveal;
  // @@protoc_insertion_point(field_mutable:yosysZKP.ProverSecret.execution)
  return execution_;
}
inline ::yosysZKP::ExecutionReveal* ProverSecret::release_execution() {
  clear_has_execution();
  ::yosysZKP::ExecutionReveal* temp = execution_;
  execution_ = NULL;
  return temp;
}
inline void ProverSecret::set_allocated_execution(::yosysZKP::ExecutionReveal* execution) {
  delete execution_;
  execution_ = execution;
  if (execution) {
    set_has_execution();
  } else {
    clear_has_execution();
  }
  // @@protoc_insertion_point(field_set_allocated:yosysZKP.ProverSecret.execution)
}

// optional .yosysZKP.ScramblingReveal scrambling = 2;
inline bool ProverSecret::has_scrambling() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProverSecret::set_has_scrambling() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProverSecret::clear_has_scrambling() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProverSecret::clear_scrambling() {
  if (scrambling_ != NULL) scrambling_->::yosysZKP::ScramblingReveal::Clear();
  clear_has_scrambling();
}
inline const ::yosysZKP::ScramblingReveal& ProverSecret::scrambling() const {
  // @@protoc_insertion_point(field_get:yosysZKP.ProverSecret.scrambling)
  return scrambling_ != NULL ? *scrambling_ : *default_instance_->scrambling_;
}
inline ::yosysZKP::ScramblingReveal* ProverSecret::mutable_scrambling() {
  set_has_scrambling();
  if (scrambling_ == NULL) scrambling_ = new ::yosysZKP::ScramblingReveal;
  // @@protoc_insertion_point(field_mutable:yosysZKP.ProverSecret.scrambling)
  return scrambling_;
}
inline ::yosysZKP::ScramblingReveal* ProverSecret::release_scrambling() {
  clear_has_scrambling();
  ::yosysZKP::ScramblingReveal* temp = scrambling_;
  scrambling_ = NULL;
  return temp;
}
inline void ProverSecret::set_allocated_scrambling(::yosysZKP::ScramblingReveal* scrambling) {
  delete scrambling_;
  scrambling_ = scrambling;
  if (scrambling) {
    set_has_scrambling();
  } else {
    clear_has_scrambling();
  }
  // @@protoc_insertion_point(field_set_allocated:yosysZKP.ProverSecret.scrambling)
}

// -------------------------------------------------------------------

// RevealRequest

// repeated bool scrambling = 1;
inline int RevealRequest::scrambling_size() const {
  return scrambling_.size();
}
inline void RevealRequest::clear_scrambling() {
  scrambling_.Clear();
}
inline bool RevealRequest::scrambling(int index) const {
  // @@protoc_insertion_point(field_get:yosysZKP.RevealRequest.scrambling)
  return scrambling_.Get(index);
}
inline void RevealRequest::set_scrambling(int index, bool value) {
  scrambling_.Set(index, value);
  // @@protoc_insertion_point(field_set:yosysZKP.RevealRequest.scrambling)
}
inline void RevealRequest::add_scrambling(bool value) {
  scrambling_.Add(value);
  // @@protoc_insertion_point(field_add:yosysZKP.RevealRequest.scrambling)
}
inline const ::google::protobuf::RepeatedField< bool >&
RevealRequest::scrambling() const {
  // @@protoc_insertion_point(field_list:yosysZKP.RevealRequest.scrambling)
  return scrambling_;
}
inline ::google::protobuf::RepeatedField< bool >*
RevealRequest::mutable_scrambling() {
  // @@protoc_insertion_point(field_mutable_list:yosysZKP.RevealRequest.scrambling)
  return &scrambling_;
}

// -------------------------------------------------------------------

// ProveeState

// required bool scrambling = 1;
inline bool ProveeState::has_scrambling() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProveeState::set_has_scrambling() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProveeState::clear_has_scrambling() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProveeState::clear_scrambling() {
  scrambling_ = false;
  clear_has_scrambling();
}
inline bool ProveeState::scrambling() const {
  // @@protoc_insertion_point(field_get:yosysZKP.ProveeState.scrambling)
  return scrambling_;
}
inline void ProveeState::set_scrambling(bool value) {
  set_has_scrambling();
  scrambling_ = value;
  // @@protoc_insertion_point(field_set:yosysZKP.ProveeState.scrambling)
}

// required .yosysZKP.Commitment commitment = 2;
inline bool ProveeState::has_commitment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProveeState::set_has_commitment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProveeState::clear_has_commitment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProveeState::clear_commitment() {
  if (commitment_ != NULL) commitment_->::yosysZKP::Commitment::Clear();
  clear_has_commitment();
}
inline const ::yosysZKP::Commitment& ProveeState::commitment() const {
  // @@protoc_insertion_point(field_get:yosysZKP.ProveeState.commitment)
  return commitment_ != NULL ? *commitment_ : *default_instance_->commitment_;
}
inline ::yosysZKP::Commitment* ProveeState::mutable_commitment() {
  set_has_commitment();
  if (commitment_ == NULL) commitment_ = new ::yosysZKP::Commitment;
  // @@protoc_insertion_point(field_mutable:yosysZKP.ProveeState.commitment)
  return commitment_;
}
inline ::yosysZKP::Commitment* ProveeState::release_commitment() {
  clear_has_commitment();
  ::yosysZKP::Commitment* temp = commitment_;
  commitment_ = NULL;
  return temp;
}
inline void ProveeState::set_allocated_commitment(::yosysZKP::Commitment* commitment) {
  delete commitment_;
  commitment_ = commitment;
  if (commitment) {
    set_has_commitment();
  } else {
    clear_has_commitment();
  }
  // @@protoc_insertion_point(field_set_allocated:yosysZKP.ProveeState.commitment)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yosysZKP

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
